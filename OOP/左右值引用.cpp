/*
 * 左值引用和右值引用
 * 
 * 为支持移动操作引入右值引用&&，右值引用的一个重要性质：只能绑定到一个将要销毁的对象（有移动构造函数和移动赋值运算符将一个右值引用的资源移动到另一个对象中）
 * 左值持久，右值短暂：右值引用只能绑定到临时对象，1. 所引用的对象即将被销毁 2. 该对象没有其他用户
 * 从一个对象移动数据不会销毁此对象，但有时在移动操作完成后，原对象会被销毁
 * 所以移动操作之后，保证移后源对象必须保持有效、可析构的状态（可析构是指指针成员置空，有效是指可以安全地为其赋予新值或安全地使用而不依赖当前值）
 * 一个左值引用表达的是一个对象的身份，一个右值引用表达的是对象的值
 * 类似与常规引用（左值引用）一个右值引用也不过是某个对象的另一个名字而已
 * 返回左值表达式：赋值、下标、解引用、前置递增/递减运算符
 * 返回右值表达式：算数、关系、位、后置递增/递减运算符（例外：可以将一个const的左值引用绑定到右值表达式上）
 */

int main() {
    int a = 5;
    int &b = a; // 左值引用
    int &&c = 5 + 2; // 右值引用
}